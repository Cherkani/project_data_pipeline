services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    expose:
      - "2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - kafka_zookeeper:/opt/zookeeper-3.6.1/data
    networks:
      - binance_app_network

  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    ports:
      - '9093:9093'  # External port for Kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://172.18.0.10:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_MESSAGE_MAX_BYTES=1073741824  # 1 GB max message size
      - KAFKA_CFG_REPLICA_FETCH_MAX_BYTES=1073741824  # 1 GB max replica fetch size
      - KAFKA_CFG_MAX_REQUEST_SIZE=1073741824  # Allow 1 GB max request size
    volumes:
      - kafka_kafka:/opt/kafka_2.12-2.2.0/logs
    networks:
      binance_app_network:
        ipv4_address: 172.18.0.10
    depends_on:
      - "zookeeper"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - 8066:8080  # Change port from 8080 to 8066
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - binance_app_network


  nifi:
    container_name: nifi
    image: apache/nifi:1.19.1
    ports:
      - "8090:8090"  # NiFi UI
    environment:
      - NIFI_WEB_HTTP_PORT=8090
    volumes:
      - ./nifi/database_repository:/opt/nifi/nifi-current/database_repository
      - ./nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - ./nifi/content_repository:/opt/nifi/nifi-current/content_repository
      - ./nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository      
    networks:
      - binance_app_network

# Spark Master Node
  spark-master:
    container_name: spark-master
    image: bitnami/spark:3.5
    command: /bin/bash -c "pip install requests pandas pyspark==3.5.3 && bin/spark-class org.apache.spark.deploy.master.Master"
    ports:
      - "7077:7077"  # Spark Master Port
      - "8083:8083"  # Spark Web UI
    environment:
      - SPARK_NO_DAEMONIZE=true
      - SPARK_MASTER_WEBUI_PORT=8083
      - SPARK_AUTHENTICATE=false
      - SPARK_AUTHENTICATE_UI=false
    networks:
      - binance_app_network

  # Spark Worker Node
  spark-worker:
    container_name: spark-worker
    image: bitnami/spark:3.5
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    environment:
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=5g
      - SPARK_NO_DAEMONIZE=true
      - SPARK_AUTHENTICATE=false
      - SPARK_AUTHENTICATE_UI=false
    networks:
      - binance_app_network

  # Elasticsearch for Data Storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false  # Disable authentication
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      binance_app_network:
        ipv4_address: 172.18.0.6

  # Kibana for Elasticsearch UI
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.1 
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"  # Kibana UI
    networks:
      - binance_app_network

  # Apache Flink JobManager
  jobmanager:
    image: flink:1.17.1
    container_name: jobmanager
    ports:
      - "8081:8081"  # Flink Web UI
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    command: jobmanager
    networks:
      - binance_app_network

  # Apache Flink TaskManager
  taskmanager:
    image: flink:1.17.1
    container_name: taskmanager
    depends_on:
      - jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    command: taskmanager
    networks:
      - binance_app_network

#  tableau-server:
#    hostname: localhost
#    volumes:
#      - C:\Users\cherk\Desktop\KalloubiProject\tableau-server-container-setup-tool-2024.2.0\tableau-server-container-setup-tool-2024.2.0\reg-info.json:/docker/config/config.json:ro
#    ports:
#      - "8010:8010"
#    image: tableau_server_image:20242.24.0910.0334
#    environment:
#      - LICENSE_KEY=TCV2-9B80-4BD0-5DAE-2641
#    networks:
#     - binance_app_network
      

networks:
  binance_app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/24

volumes:
  nifi_database:
  nifi_flowfile:
  nifi_content:
  nifi_provenance:
  elasticsearch_data:
  kafka_zookeeper:
  kafka_kafka: